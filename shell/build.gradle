plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'corda.common-publishing'

// We need to set mainClassName before applying the shadow plugin.
mainClassName = 'net.corda.tools.shell.standalone.StandaloneShellKt'
apply plugin: 'com.github.johnrengelman.shadow'

description 'Corda Shell'

configurations {
    cordaShellDependencies {}
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources {
            srcDir file('src/integration-test/resources')
        }
    }
}

dependencies {

    implementation "$cordaReleaseGroup:corda-core:$cordaReleaseVersion"
    implementation "$cordaReleaseGroup:corda-node-api:$cordaReleaseVersion"

    implementation "$cordaReleaseGroup:corda-rpc:$cordaReleaseVersion"
    implementation "$cordaReleaseGroup:corda-tools-cliutils:$cordaReleaseVersion"
    implementation "$cordaReleaseGroup:corda-common-logging:$cordaReleaseVersion"
    implementation "$cordaReleaseGroup:corda-common-configuration-parsing:$cordaReleaseVersion"

    implementation "io.reactivex:rxjava:$rxjavaVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    implementation "info.picocli:picocli:$picocliVersion"
    implementation "com.typesafe:config:$typesafeConfigVersion"
    implementation "com.google.guava:guava:$guavaVersion"
    implementation "org.apache.commons:commons-lang3:$commonsLang3Version"
    implementation "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
    implementation "org.apache.activemq:artemis-commons:$artemisVersion"

    // Jackson support: serialisation to/from JSON, YAML, etc.
    implementation "$cordaReleaseGroup:corda-jackson:$cordaReleaseVersion"

    // Bouncy castle support needed for X509 certificate manipulation
    testImplementation "org.bouncycastle:bcprov-debug-jdk18on:${bouncycastleVersion}"
    testImplementation "org.bouncycastle:bcpkix-debug-jdk18on:${bouncycastleVersion}"

    testImplementation "co.paralleluniverse:quasar-core:$quasar_version"

    // CRaSH: An embeddable monitoring and admin shell with support for adding new commands written in Groovy.
    implementation("org.crashub:crash.shell:$crashVersion") {
        exclude group: "org.slf4j", module: "slf4j-jdk14"
        exclude group: "org.bouncycastle"
    }

    implementation("org.crashub:crash.cli:$crashVersion") {
        exclude group: "org.slf4j", module: "slf4j-jdk14"
        exclude group: "org.bouncycastle"
    }

    implementation("org.crashub:crash.connectors.ssh:$crashVersion") {
        exclude group: "org.slf4j", module: "slf4j-jdk14"
        exclude group: "org.bouncycastle"
    }


    // JAnsi: for drawing things to the terminal in nicely coloured ways.
    implementation "org.fusesource.jansi:jansi:$jansiVersion"

    // Manifests: for reading stuff from the manifest file.
    implementation "com.jcabi:jcabi-manifests:1.1"

    // For logging, required for ANSIProgressRenderer.
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.slf4j:jul-to-slf4j:$slf4jVersion"

    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"

    testImplementation "junit:junit:$junitVersion"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junitVintageVersion"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"

    // Unit testing helpers.
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "$cordaReleaseGroup:corda-node:$cordaReleaseVersion"
    testImplementation "$cordaReleaseGroup:corda-core-test-utils:$cordaReleaseVersion"
    testImplementation "$cordaReleaseGroup:corda-test-utils:$cordaReleaseVersion"
    testImplementation "$cordaReleaseGroup:corda-jackson:$cordaReleaseVersion"
    testImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"

    // Jsh: Testing SSH server.
    integrationTestImplementation "com.jcraft:jsch:$jschVersion"

    integrationTestImplementation "$cordaReleaseGroup:corda-node-driver:$cordaReleaseVersion"
    integrationTestRuntimeOnly "org.apache.sshd:sshd-core:$sshdCoreVersion"

    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation 'com.github.bft-smart:library:master-v1.1-beta-g6215ec8-87'
}

tasks.withType(JavaCompile).configureEach {
    // Resolves a Gradle warning about not scanning for pre-processors.
    options.compilerArgs << '-proc:none'
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

jar {
    enabled = false
    archiveClassifier = 'ignore'
}

shadowJar {
    archiveBaseName = 'corda-shell'
    archiveClassifier = ''
    mergeServiceFiles()
    manifest {
        attributes "Corda-Release-Version": cordaReleaseVersion
        attributes('Corda-Platform-Version': cordaPlatformVersion)
        attributes "Corda-Vendor": cordaBuildEdition
    }
}

processResources {
    from file("./resources/log4j2.xml")
}

test {
    jvmArgs '--add-opens', 'java.base/java.time=ALL-UNNAMED'
}

integrationTest {
    jvmArgs += [
            '--add-opens', 'java.base/java.time=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED', '--add-opens', 'java.base/java.net=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio=ALL-UNNAMED', '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
            '--add-opens', 'java.base/java.security.cert=ALL-UNNAMED', '--add-opens', 'java.base/javax.net.ssl=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED', '--add-opens', 'java.sql/java.sql=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.security=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.security.x509=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.security.util=ALL-UNNAMED',
            '--add-opens', 'jdk.crypto.ec/sun.security.ec.ed=ALL-UNNAMED',
            '--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED'
    ]
}




publishing {
    publications {
        maven(MavenPublication) {
            artifactId 'corda-shell'
            artifact(shadowJar) {
            }
        }
    }
}

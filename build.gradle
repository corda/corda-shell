import static org.gradle.api.JavaVersion.VERSION_11

buildscript {

    ext.cordaBuildEdition = System.getenv("CORDA_BUILD_EDITION")?.trim() ?: "Corda Enterprise Edition"

    ext.cordaRevision = {
        try {
            "git rev-parse HEAD".execute().text.trim()
        } catch (Exception ignored) {
            logger.warn("git is unavailable in build environment")
            "unknown"
        }
    }()

    ext.quasar_exclusions = [
            'co.paralleluniverse**',
            'groovy**',
            'com.esotericsoftware.**',
            'jdk**',
            'junit**',
            'kotlin**',
            'net.rubygrapefruit.**',
            'org.gradle.**',
            'org.apache.**',
            'org.jacoco.**',
            'org.junit**',
            'org.slf4j**',
            'worker.org.gradle.**',
            'org.mockito.kotlin**',
            'org.assertj**',
            'org.hamcrest**',
            'org.mockito**',
            'org.opentest4j**'
    ]

    repositories {
        mavenLocal()
        // Use system environment to activate caching with Artifactory,
        // because it is actually easier to pass that during parallel build.
        // NOTE: it has to be a name of a virtual repository with all
        // required remote or local repositories!
        if (System.getenv("CORDA_USE_CACHE")) {
            maven {
                name "R3 Maven remote repositories"
                url "${artifactoryContextUrl}/${System.getenv("CORDA_USE_CACHE")}"
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
        } else {
            maven {
                url "${artifactoryContextUrl}/corda-dependencies-dev"
                content {
                    includeGroupByRegex 'net\\.corda(\\..*)?'
                    includeGroupByRegex 'com\\.r3(\\..*)?'
                }
            }
            maven {
                url "${artifactoryContextUrl}/corda-releases"
                content {
                    includeGroupByRegex 'net\\.corda(\\..*)?'
                    includeGroupByRegex 'com\\.r3(\\..*)?'
                }
            }
            maven { url 'https://software.r3.com/artifactory/corda-releases' }
            maven { url 'https://software.r3.com/artifactory/corda-dependencies' }
            mavenCentral()
        }
        maven {
            url "${artifactoryContextUrl}/r3-corda-dev"
            credentials {
                username = System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
        }
        maven {
            url "${artifactoryContextUrl}/r3-corda-releases"
            credentials {
                username = System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "net.corda.plugins:cordapp:$gradlePluginsVersion"
        classpath "net.corda.plugins:quasar-utils:$gradlePluginsVersion"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'corda.root-publish'
}

version = "$cordaShellReleaseVersion$versionSuffix"


logger.quiet("Corda release version: {}", version)

allprojects {

    group 'com.r3.corda'
    version rootProject.version

    repositories {
        mavenLocal()
        if (System.getenv("CORDA_USE_CACHE")) {
            maven {
                name "R3 Maven remote repositories"
                url "${artifactoryContextUrl}/${System.getenv("CORDA_USE_CACHE")}"
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
        } else {
            maven {
                url "${artifactoryContextUrl}/corda-dependencies"
                content {
                    includeGroupByRegex 'net\\.corda(\\..*)?'
                    includeGroupByRegex 'com\\.r3(\\..*)?'
                    includeGroup 'co.paralleluniverse'
                    includeGroup 'org.crashub'
                    includeGroup 'com.github.bft-smart'
                }
                metadataSources { artifact() }
            }
            maven {
                url "${artifactoryContextUrl}/corda-dev"
                content {
                    includeGroupByRegex 'net\\.corda(\\..*)?'
                    includeGroupByRegex 'com\\.r3(\\..*)?'
                }
            }
            maven {
                url 'https://repo.gradle.org/gradle/libs-releases'
                content {
                    includeGroup 'org.gradle'
                    includeGroup 'com.github.detro'
                }
            }
            maven { url 'https://software.r3.com/artifactory/corda-releases' }
            maven { url 'https://software.r3.com/artifactory/corda-dependencies' }
            maven {
                url "${artifactoryContextUrl}/r3-corda-dev"
                credentials {
                    username = System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
            maven {
                url "${artifactoryContextUrl}/r3-corda-releases"
                credentials {
                    username = System.getenv('CORDA_ARTIFACTORY_USERNAME')
                    password = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
                }
            }
            mavenCentral()
        }
    }

    tasks.withType(Jar).configureEach { task ->
        // Includes War and Ear
        manifest {
            attributes('Corda-Release-Version': cordaReleaseVersion)
            attributes('Corda-Platform-Version': cordaPlatformVersion)
            attributes('Corda-Revision': cordaRevision)
            attributes('Corda-Vendor': cordaBuildEdition)
            attributes('Automatic-Module-Name': "net.corda.${task.project.name.replaceAll('-', '.')}")
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
}

allprojects {
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:-options" << "-parameters"
        options.compilerArgs << '-XDenableSunApiLintControl'
        options.encoding = 'UTF-8'
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            languageVersion = "1.8"
            apiVersion = "1.8"
            jvmTarget = VERSION_11
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs = ['-Xjvm-default=all-compatibility']
            allWarningsAsErrors = false
        }
    }
}
